// Generated by gencpp from file mower_ctrl/CtrlCommand.msg
// DO NOT EDIT!


#ifndef MOWER_CTRL_MESSAGE_CTRLCOMMAND_H
#define MOWER_CTRL_MESSAGE_CTRLCOMMAND_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace mower_ctrl
{
template <class ContainerAllocator>
struct CtrlCommand_
{
  typedef CtrlCommand_<ContainerAllocator> Type;

  CtrlCommand_()
    : driving_speed(0.0)
    , steering_angle(0.0)  {
    }
  CtrlCommand_(const ContainerAllocator& _alloc)
    : driving_speed(0.0)
    , steering_angle(0.0)  {
  (void)_alloc;
    }



   typedef float _driving_speed_type;
  _driving_speed_type driving_speed;

   typedef float _steering_angle_type;
  _steering_angle_type steering_angle;





  typedef boost::shared_ptr< ::mower_ctrl::CtrlCommand_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::mower_ctrl::CtrlCommand_<ContainerAllocator> const> ConstPtr;

}; // struct CtrlCommand_

typedef ::mower_ctrl::CtrlCommand_<std::allocator<void> > CtrlCommand;

typedef boost::shared_ptr< ::mower_ctrl::CtrlCommand > CtrlCommandPtr;
typedef boost::shared_ptr< ::mower_ctrl::CtrlCommand const> CtrlCommandConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::mower_ctrl::CtrlCommand_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::mower_ctrl::CtrlCommand_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::mower_ctrl::CtrlCommand_<ContainerAllocator1> & lhs, const ::mower_ctrl::CtrlCommand_<ContainerAllocator2> & rhs)
{
  return lhs.driving_speed == rhs.driving_speed &&
    lhs.steering_angle == rhs.steering_angle;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::mower_ctrl::CtrlCommand_<ContainerAllocator1> & lhs, const ::mower_ctrl::CtrlCommand_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace mower_ctrl

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::mower_ctrl::CtrlCommand_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mower_ctrl::CtrlCommand_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mower_ctrl::CtrlCommand_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mower_ctrl::CtrlCommand_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mower_ctrl::CtrlCommand_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mower_ctrl::CtrlCommand_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::mower_ctrl::CtrlCommand_<ContainerAllocator> >
{
  static const char* value()
  {
    return "dc1417894b967b9dcd292bce2f9f4da6";
  }

  static const char* value(const ::mower_ctrl::CtrlCommand_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xdc1417894b967b9dULL;
  static const uint64_t static_value2 = 0xcd292bce2f9f4da6ULL;
};

template<class ContainerAllocator>
struct DataType< ::mower_ctrl::CtrlCommand_<ContainerAllocator> >
{
  static const char* value()
  {
    return "mower_ctrl/CtrlCommand";
  }

  static const char* value(const ::mower_ctrl::CtrlCommand_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::mower_ctrl::CtrlCommand_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 driving_speed\n"
"float32 steering_angle\n"
;
  }

  static const char* value(const ::mower_ctrl::CtrlCommand_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::mower_ctrl::CtrlCommand_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.driving_speed);
      stream.next(m.steering_angle);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct CtrlCommand_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::mower_ctrl::CtrlCommand_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::mower_ctrl::CtrlCommand_<ContainerAllocator>& v)
  {
    s << indent << "driving_speed: ";
    Printer<float>::stream(s, indent + "  ", v.driving_speed);
    s << indent << "steering_angle: ";
    Printer<float>::stream(s, indent + "  ", v.steering_angle);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MOWER_CTRL_MESSAGE_CTRLCOMMAND_H
