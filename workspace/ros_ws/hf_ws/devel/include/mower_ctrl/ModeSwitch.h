// Generated by gencpp from file mower_ctrl/ModeSwitch.msg
// DO NOT EDIT!


#ifndef MOWER_CTRL_MESSAGE_MODESWITCH_H
#define MOWER_CTRL_MESSAGE_MODESWITCH_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace mower_ctrl
{
template <class ContainerAllocator>
struct ModeSwitch_
{
  typedef ModeSwitch_<ContainerAllocator> Type;

  ModeSwitch_()
    : target_mode(0)  {
    }
  ModeSwitch_(const ContainerAllocator& _alloc)
    : target_mode(0)  {
  (void)_alloc;
    }



   typedef uint8_t _target_mode_type;
  _target_mode_type target_mode;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(MOTION_MODE_STEERING)
  #undef MOTION_MODE_STEERING
#endif
#if defined(_WIN32) && defined(MOTION_MODE_TRANSLATION)
  #undef MOTION_MODE_TRANSLATION
#endif
#if defined(_WIN32) && defined(MOTION_MODE_ROTATION)
  #undef MOTION_MODE_ROTATION
#endif

  enum {
    MOTION_MODE_STEERING = 0u,
    MOTION_MODE_TRANSLATION = 1u,
    MOTION_MODE_ROTATION = 2u,
  };


  typedef boost::shared_ptr< ::mower_ctrl::ModeSwitch_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::mower_ctrl::ModeSwitch_<ContainerAllocator> const> ConstPtr;

}; // struct ModeSwitch_

typedef ::mower_ctrl::ModeSwitch_<std::allocator<void> > ModeSwitch;

typedef boost::shared_ptr< ::mower_ctrl::ModeSwitch > ModeSwitchPtr;
typedef boost::shared_ptr< ::mower_ctrl::ModeSwitch const> ModeSwitchConstPtr;

// constants requiring out of line definition

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::mower_ctrl::ModeSwitch_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::mower_ctrl::ModeSwitch_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::mower_ctrl::ModeSwitch_<ContainerAllocator1> & lhs, const ::mower_ctrl::ModeSwitch_<ContainerAllocator2> & rhs)
{
  return lhs.target_mode == rhs.target_mode;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::mower_ctrl::ModeSwitch_<ContainerAllocator1> & lhs, const ::mower_ctrl::ModeSwitch_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace mower_ctrl

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::mower_ctrl::ModeSwitch_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mower_ctrl::ModeSwitch_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mower_ctrl::ModeSwitch_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mower_ctrl::ModeSwitch_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mower_ctrl::ModeSwitch_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mower_ctrl::ModeSwitch_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::mower_ctrl::ModeSwitch_<ContainerAllocator> >
{
  static const char* value()
  {
    return "21bb3ed8ffad6c72f7481393b4163913";
  }

  static const char* value(const ::mower_ctrl::ModeSwitch_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x21bb3ed8ffad6c72ULL;
  static const uint64_t static_value2 = 0xf7481393b4163913ULL;
};

template<class ContainerAllocator>
struct DataType< ::mower_ctrl::ModeSwitch_<ContainerAllocator> >
{
  static const char* value()
  {
    return "mower_ctrl/ModeSwitch";
  }

  static const char* value(const ::mower_ctrl::ModeSwitch_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::mower_ctrl::ModeSwitch_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8 target_mode\n"
"uint8 MOTION_MODE_STEERING = 0\n"
"uint8 MOTION_MODE_TRANSLATION = 1\n"
"uint8 MOTION_MODE_ROTATION = 2\n"
;
  }

  static const char* value(const ::mower_ctrl::ModeSwitch_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::mower_ctrl::ModeSwitch_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.target_mode);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ModeSwitch_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::mower_ctrl::ModeSwitch_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::mower_ctrl::ModeSwitch_<ContainerAllocator>& v)
  {
    s << indent << "target_mode: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.target_mode);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MOWER_CTRL_MESSAGE_MODESWITCH_H
