# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from mower_ctrl/SensorValue.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class SensorValue(genpy.Message):
  _md5sum = "6b1c1b5327ee628950d965f31630e649"
  _type = "mower_ctrl/SensorValue"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """uint8 col_data1
uint8 col_data2
uint8 col_data3
uint8 col_data4
uint16 ul_data1
uint16 ul_data2
uint16 ul_data3
uint16 ul_data4
uint32 distance
uint8 carpipe
uint8 rollpipe
float32 nowcar_speed"""
  __slots__ = ['col_data1','col_data2','col_data3','col_data4','ul_data1','ul_data2','ul_data3','ul_data4','distance','carpipe','rollpipe','nowcar_speed']
  _slot_types = ['uint8','uint8','uint8','uint8','uint16','uint16','uint16','uint16','uint32','uint8','uint8','float32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       col_data1,col_data2,col_data3,col_data4,ul_data1,ul_data2,ul_data3,ul_data4,distance,carpipe,rollpipe,nowcar_speed

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(SensorValue, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.col_data1 is None:
        self.col_data1 = 0
      if self.col_data2 is None:
        self.col_data2 = 0
      if self.col_data3 is None:
        self.col_data3 = 0
      if self.col_data4 is None:
        self.col_data4 = 0
      if self.ul_data1 is None:
        self.ul_data1 = 0
      if self.ul_data2 is None:
        self.ul_data2 = 0
      if self.ul_data3 is None:
        self.ul_data3 = 0
      if self.ul_data4 is None:
        self.ul_data4 = 0
      if self.distance is None:
        self.distance = 0
      if self.carpipe is None:
        self.carpipe = 0
      if self.rollpipe is None:
        self.rollpipe = 0
      if self.nowcar_speed is None:
        self.nowcar_speed = 0.
    else:
      self.col_data1 = 0
      self.col_data2 = 0
      self.col_data3 = 0
      self.col_data4 = 0
      self.ul_data1 = 0
      self.ul_data2 = 0
      self.ul_data3 = 0
      self.ul_data4 = 0
      self.distance = 0
      self.carpipe = 0
      self.rollpipe = 0
      self.nowcar_speed = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_4B4HI2Bf().pack(_x.col_data1, _x.col_data2, _x.col_data3, _x.col_data4, _x.ul_data1, _x.ul_data2, _x.ul_data3, _x.ul_data4, _x.distance, _x.carpipe, _x.rollpipe, _x.nowcar_speed))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 22
      (_x.col_data1, _x.col_data2, _x.col_data3, _x.col_data4, _x.ul_data1, _x.ul_data2, _x.ul_data3, _x.ul_data4, _x.distance, _x.carpipe, _x.rollpipe, _x.nowcar_speed,) = _get_struct_4B4HI2Bf().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_4B4HI2Bf().pack(_x.col_data1, _x.col_data2, _x.col_data3, _x.col_data4, _x.ul_data1, _x.ul_data2, _x.ul_data3, _x.ul_data4, _x.distance, _x.carpipe, _x.rollpipe, _x.nowcar_speed))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 22
      (_x.col_data1, _x.col_data2, _x.col_data3, _x.col_data4, _x.ul_data1, _x.ul_data2, _x.ul_data3, _x.ul_data4, _x.distance, _x.carpipe, _x.rollpipe, _x.nowcar_speed,) = _get_struct_4B4HI2Bf().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_4B4HI2Bf = None
def _get_struct_4B4HI2Bf():
    global _struct_4B4HI2Bf
    if _struct_4B4HI2Bf is None:
        _struct_4B4HI2Bf = struct.Struct("<4B4HI2Bf")
    return _struct_4B4HI2Bf
